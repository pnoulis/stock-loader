unit udmServerMSSQL;

interface

uses
  FMX.Forms,
  u_order,
  untTypes,
  uDBConnect,
  FMX.dialogs,
  System.Variants,
  System.DateUtils,
  System.SysUtils,
  System.Classes,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.FMXUI.Wait,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  Data.DB,
  FireDAC.Comp.DataSet,
  FireDAC.Comp.Client,
  FireDAC.Phys.MSSQLDef,
  FireDAC.Phys.ODBCBase,
  FireDAC.Phys.MSSQL,
  FireDAC.VCLUI.Wait;

type
  TOnConnected = reference to procedure;
  TOnConnectionError = procedure(const errMsg: string) of object;

  TdmServerMSSQL = class(TDataModule)
    connection: TFDConnection;
    driverMSSQL: TFDPhysMSSQLDriverLink;
    tableStockOrders: TFDTable;
    queryStockMoves: TFDQuery;
    storedAddStockMove: TFDStoredProc;
    queryItem: TFDQuery;
    storedAddStockOrder: TFDStoredProc;
    DataSource1: TDataSource;
  private type
    TAfterFetch = reference to procedure(Data: TDataSource);
    TAfterCommitOrder = reference to procedure(stockOrderID: string;
      servedDate: TDateTime);
    TAfterCommitMove = reference to procedure(stockMoveID: cardinal);

  public
    onConnected: TOnConnected;
    onConnectionError: TOnConnectionError;
    currentOrderID: uint32;
    procedure connect;
    function fetchOrders: TFDTable;
    procedure fetchAsyncOrders(cb: TAfterFetch);
    procedure fetchBetween(cb: TAfterFetch);
    procedure fetchOrdersFilterDate(dateFrom, dateTo: TDate; cb: TAfterFetch);
    procedure fetchProduce(const orderID: string; cb: TAfterFetch);
    function fetchItem(const itemCID: string): TDataSource;

    procedure addStockOrder(cb: TAfterCommitOrder);
    function addStockMove(stockOrderID, itemCID, stockIncrease: string;
      stockMoveID: string = ''): cardinal;
  end;

var
  DB: TdmServerMSSQL;

procedure initialize;

implementation

{%CLASSGROUP 'FMX.Controls.TControl'}
{$R *.dfm}

const
  DBCONN_CONFIG_FILEPATH = './config/config.ini';
  DBCONN_CONFIG_INI_SECTION = 'DBCONN_TEMP';
  // {$IFDEF RELEASE}
  // 'DBCONN_MSSQL_RELEASE';
  // {$ELSEIF defined(BRATNET)}
  // 'DBCONN_MSSQL_DEBUG_BRATNET';
  // {$ELSE}
  // 'DBCONN_MSSQL_DEBUG';
  // {$IFEND}

var
  connected: Boolean;
  errMsg: string;
  DataSource1: TDataSource;

procedure initialize;
begin
  if not assigned(DB) then
    Application.CreateForm(TdmServerMSSQL, DB);
end;

procedure TdmServerMSSQL.connect;
begin
  TThread.CreateAnonymousThread(
    procedure
    begin
      if not connected then
      begin

        try
          uDBConnect.setupDBconn(connection, DBCONN_CONFIG_INI_SECTION,
            DBCONN_CONFIG_FILEPATH);
          connected := true;
        except
          on E: Exception do
            errMsg := E.Message;
        end;

      end;

      TThread.Synchronize(nil,
        procedure
        begin

          if connected then
            onConnected()
          else
            onConnectionError(errMsg);

        end);

    end).Start;
end;

function TdmServerMSSQL.fetchItem(const itemCID: string): TDataSource;
begin
  var
  query := queryItem;
  try
    query.Active := false;
    query.Open
      ('select a.itemCID, a.itemName, b.qnt from item a, itemStg b where ' +
      'a.itemCID = b.itemCID and a.itemCID = ''' + itemCID + '''');
    query.Active := true;
    DataSource1.DataSet := query;
    result := DataSource1;
  except
    on E: Exception do
    begin
      showMessage(E.Message);
      result := nil;
    end;

  end;
end;

function TdmServerMSSQL.fetchOrders: TFDTable;
begin
  result := tableStockOrders;
  result.Active := false;
  result.IndexFieldNames := 'moveDate:A';
  result.Active := true;
end;

procedure TdmServerMSSQL.fetchAsyncOrders(cb: TAfterFetch);
begin
  var
  table := tableStockOrders;

  try
    table.Active := false;
    table.Filter := '';
    table.Filtered := false;
    // table.IndexFieldNames := 'moveDate:D';
    table.Active := true;
    DataSource1.DataSet := tableStockOrders;
    cb(DataSource1);
  except
    cb(nil);
  end;

end;

procedure TdmServerMSSQL.fetchBetween(cb: TdmServerMSSQL.TAfterFetch);
begin
  var
  table := tableStockOrders;
  var
  f1 := '( moveDate >= {d ' + '2022-05-12' + '} )' + ' and ( moveDate <= {d ' +
    '2022-05-28' + '} )';
  table.Filtered := false;
  table.Filter := f1;
  table.Filtered := true;
  cb(DataSource1);
end;

procedure TdmServerMSSQL.fetchOrdersFilterDate(dateFrom: TDate; dateTo: TDate;
cb: TdmServerMSSQL.TAfterFetch);
begin

  var
  table := tableStockOrders;
  table.Filtered := false;
  table.Filter := '(moveDate >= {d ' + formatDateTime('yyyy-mm-dd', dateFrom) +
    '})' + ' and (moveDate <= {d ' + formatDateTime('yyyy-mm-dd',
    IncDay(dateTo)) + '})';
  table.Filtered := true;
  cb(DataSource1);
end;

procedure TdmServerMSSQL.addStockOrder(cb: TdmServerMSSQL.TAfterCommitOrder);
begin
  storedAddStockOrder.Close;
  storedAddStockOrder.StoredProcName := 'addStockOrder';
  storedAddStockOrder.SchemaName := 'dbo';
  storedAddStockOrder.Prepare;
  storedAddStockOrder.ParamByName('@storeID').Value := 1;
  storedAddStockOrder.ExecProc;

  cb(storedAddStockOrder.ParamByName('@stockOrderID').AsString,
    storedAddStockOrder.ParamByName('@servedDate').Value);

  storedAddStockOrder.Close;
end;

function TdmServerMSSQL.addStockMove(stockOrderID: string; itemCID: string;
stockIncrease: string; stockMoveID: string = ''): cardinal;
var
  res: string;
begin

  showMessage('starting add stock move');
  storedAddStockMove.Close;
  storedAddStockMove.StoredProcName := 'addStockMove';
  storedAddStockMove.SchemaName := 'dbo';
  storedAddStockMove.Prepare;
  storedAddStockMove.ParamByName('@stockOrderID').Value :=
    strToInt(stockOrderID);
  storedAddStockMove.ParamByName('@itemCID').Value := itemCID;
  storedAddStockMove.ParamByName('@stockIncrease').Value :=
    strToFloat(stockIncrease);
  if (stockMoveID <> '-') and (stockMoveID <> '') then
  begin
    showMessage('stockmoveid is not null');
    storedAddStockMove.ParamByName('@stockMoveID').Value :=
      strToInt(stockMoveID);
  end;
  storedAddStockMove.ExecProc;
  result := storedAddStockMove.Params[0].Value;
end;

procedure TdmServerMSSQL.fetchProduce(const orderID: string; cb: TAfterFetch);
begin
  var
  query := queryStockMoves;

  try
    query.Active := false;
    query.Open('select * from stockMoves where stockOrderID = ' +
      orderID);
    query.Active := true;
    DataSource1.DataSet := query;
    cb(DataSource1);
  except
    on E: Exception do
    begin
      showMessage(E.Message);
      cb(nil);
    end;
  end;

end;

begin
  connected := false;

end.
